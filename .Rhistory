VaR(simulations_1,0.995,0.95)
VaR(simulations_1,0.999,0.95)
CTE(simulations_1,0.95,0.95)
install.packages("parallel")
no_cores <- detectCores() - 1
library(parallel) #used ot run the code in parallel
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
?ugarchroll
# begin by clearing our workspace
rm(list=ls())
# -- Load in required libraries -- #
library(quantmod) #used to fetch the data
library(rugarch)
library(parallel) #used ot run the code in parallel
# -- Load in the data -- #
?ugarchroll
# begin by clearing our workspace
rm(list=ls())
# -- Load in required libraries -- #
library(quantmod) #used to fetch the data
library(rugarch)
library(parallel) #used ot run the code in parallel
# -- Load in the data -- #
# for now we'll just use a single set for testing out the r code
ticker<- "IBM"
getSymbols(Symbols=c(ticker),
from="2015-01-01",
to="2016-12-01",
src="yahoo")
# Also we're concerned with the log returns of the adjusted close
returns <- dailyReturn(IBM$IBM.Adjusted,type="log")
#-- Initialize our variables --#
window.size <- 250 # roughly one trading year
steps.ahead <- c(1,2) # the various horizons at which to look ahead
alpha.levels <- c(0.005,0.01,0.05,0.10)
models.norm <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0))) , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0))) , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1))) , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)))  #EGARCH(1,1)
)
forecasts.list.norm <- as.list(rep(NA,4))
models.student <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1)),distribution.model="std") , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std")  #EGARCH(1,1)
)
forecasts.list.student <- as.list(rep(NA,4))
#-- Rolling forecasts  --#
#first set up the parallel code
no_cores <- detectCores() - 1 # save a core for the rest of your computer
# Initiate cluster
cl <- makeCluster(no_cores)
for( i in 1:(length(models.norm))){
forecasts.list.norm[[i]]<- ugarchroll(spec=models.norm[[i]],data=returns,n.ahead = 1,
refit.every = 1, refit.window ="moving",n.start =window.size,
window.size=window.size,VaR.alpha = alpha.levels,
cluster=cl)
print(paste("Completed normal forecast for model", i))
}
for( i in 1:(length(models.student))){
forecasts.list.student[[i]]<- ugarchroll(spec=models.student[[i]],data=returns,n.ahead = 1,
refit.every = 1, refit.window ="moving",n.start =window.size,
window.size=window.size,VaR.alpha = alpha.levels,
cluster=cl)
print(paste("Completed student's t forecast for model", i))
}
stopCluster(cl)
?getSymbols
prices<-getSymbols(Symbols=c(ticker),
from="2015-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)
prices
prices<-getSymbols(Symbols=c(ticker),
from="2015-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
prices
returns <- dailyReturn(IBM$IBM.Adjusted,type="log")
returns
#    845 Project
#
#   Leiguang Chen
#  Andrew van den Hoeven
# begin by clearing our workspace
rm(list=ls())
# -- Load in required libraries -- #
library(quantmod) #used to fetch the data
library(rugarch)
library(parallel) #used to run the code in parallel
# -- Load in the data -- #
# for now we'll just use a single set for testing out the r code
ticker<- "CADUSD"
prices<-getSymbols(Symbols=c(ticker),
from="2001-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CCY"
prices<-getSymbols(Symbols=c(ticker),
from="2001-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "cadusd"
prices<-getSymbols(Symbols=c(ticker),
from="2001-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "cadusd=X"
prices<-getSymbols(Symbols=c(ticker),
from="2001-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CADUSD"
prices<-getSymbols(Symbols=c(ticker),
from="2001-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CAD/USD"
prices<-getSymbols(Symbols=c(ticker),
from="2001-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CADUSD=X"
prices<-getSymbols(Symbols=c(ticker),
from="2001-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CADUSD=X"
prices<-getSymbols(Symbols=c(ticker),
from="2004-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CADUSD=X"
prices<-getSymbols(Symbols=c(ticker),
from="2005-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CADUSD=X"
prices<-getSymbols(Symbols=c(ticker),
from="2015-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CAD/USD"
prices<-getFX(Symbols=c(ticker),
from="2015-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CAD/USD"
prices<-getFX(c(ticker),
from="2015-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CAD/USD"
prices<-getFX(ticker,
from="2015-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CADUSD=X"
prices<-getSymbols(Symbols=c(ticker),
from="2015-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "IBM"
prices<-getSymbols(Symbols=c(ticker),
from="2015-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
yahoo.URL
getSymbols
ticker<- "CADUS&#61X"
prices<-getSymbols(Symbols=c(ticker),
from="2015-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CADUSD&#61X"
prices<-getSymbols(Symbols=c(ticker),
from="2015-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
ticker<- "CAD=X"
prices<-getSymbols(Symbols=c(ticker),
from="2015-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
prices
ticker<- "CAD=X"
prices<-getSymbols(Symbols=c(ticker),
from="2001-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
# begin by clearing our workspace
rm(list=ls())
# -- Load in required libraries -- #
library(quantmod) #used to fetch the data
library(rugarch)
library(parallel) #used to run the code in parallel
# -- Load in the data -- #
# for now we'll just use a single set for testing out the r code
ticker<- "CAD=X"
prices<-getSymbols(Symbols=c(ticker),
from="2004-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
# Also we're concerned with the log returns of the adjusted close
returns <- dailyReturn(prices,type="log")
#-- Initialize our variables --#
window.size <- 250 # roughly one trading year
steps.ahead <- c(1,2) # the various horizons at which to look ahead
alpha.levels <- c(0.005,0.01,0.05,0.10)
models.norm <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0))) , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0))) , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1))) , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)))  #EGARCH(1,1)
)
forecasts.list.norm <- as.list(rep(NA,4))
models.student <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1)),distribution.model="std") , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std")  #EGARCH(1,1)
)
forecasts.list.student <- as.list(rep(NA,4))
#-- Rolling forecasts  --#
#first set up the parallel code
no_cores <- detectCores() - 1 # save a core for the rest of your computer
# Initiate cluster
cl <- makeCluster(no_cores)
for( i in 1:(length(models.norm))){
forecasts.list.norm[[i]]<- ugarchroll(spec=models.norm[[i]],data=returns,n.ahead = 1,
refit.every = 1, refit.window ="moving",n.start =window.size,
window.size=window.size,VaR.alpha = alpha.levels,
cluster=cl)
print(paste("Completed normal forecast for model", i))
}
for( i in 1:(length(models.student))){
forecasts.list.student[[i]]<- ugarchroll(spec=models.student[[i]],data=returns,n.ahead = 1,
refit.every = 1, refit.window ="moving",n.start =window.size,
window.size=window.size,VaR.alpha = alpha.levels,
cluster=cl)
print(paste("Completed student's t forecast for model", i))
}
#remember to stop the cluster
stopCluster(cl)
#-- Save the results --##
saveRDS(forecasts.list.norm, paste0("normal-",ticker, ".rds"))
saveRDS(forecasts.list.student, paste0("student-",ticker, ".rds"))
ticker<- "GC=F"
prices<-getSymbols(Symbols=c(ticker),
from="2001-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
prices<-getSymbols(Symbols=c(ticker),
from="2004-01-01",
to="2016-12-01",
src="yahoo",
env=NULL)[,6]
setwd("/home/andrew/Documents/school/845/project/ACSTS845-project")
prices <- xts(read.csv("COM-CHEESE_BRL.csv"))
read.csv("COM-CHEESE_BRL.csv")
price.df <-read.csv("COM-CHEESE_BRL.csv")
prices <- xts(price.df$Value, order.by =price.df$Date  )
prices <- xts(price.df$Value, order.by = as.POSIXct( price.df$Date)  )
returns <- dailyReturn(prices,type="log")
ticker<- "COM-CHEESE_BRL"
#    845 Project
#
#   Leiguang Chen
#  Andrew van den Hoeven
# begin by clearing our workspace
rm(list=ls())
# -- Load in required libraries -- #
library(quantmod) #used to fetch the data
library(rugarch)
library(parallel) #used to run the code in parallel
# -- Load in the data -- #
setwd("/home/andrew/Documents/school/845/project/ACSTS845-project")
ticker<- "COM-CHEESE_BRL"
#prices<-getSymbols(Symbols=c(ticker),
#        from="2004-01-01",
#        to="2016-12-01",
#        src="yahoo",
#        env=NULL)[,6]
price.df <-read.csv(paste0(ticker, ".csv"))
prices <- xts(price.df$Value, order.by = as.POSIXct( price.df$Date)  )
# Also we're concerned with the log returns of the adjusted close
returns <- dailyReturn(prices,type="log")
#-- Initialize our variables --#
window.size <- 250 # roughly one trading year
steps.ahead <- c(1,2) # the various horizons at which to look ahead
alpha.levels <- c(0.005,0.01,0.05,0.10)
models.norm <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0))) , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0))) , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1))) , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)))  #EGARCH(1,1)
)
forecasts.list.norm <- as.list(rep(NA,4))
models.student <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1)),distribution.model="std") , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std")  #EGARCH(1,1)
)
forecasts.list.student <- as.list(rep(NA,4))
#-- Rolling forecasts  --#
#first set up the parallel code
no_cores <- detectCores() - 1 # save a core for the rest of your computer
# Initiate cluster
cl <- makeCluster(no_cores)
for( i in 1:(length(models.norm))){
forecasts.list.norm[[i]]<- ugarchroll(spec=models.norm[[i]],data=returns,n.ahead = 1,
refit.every = 1, refit.window ="moving",n.start =window.size,
window.size=window.size,VaR.alpha = alpha.levels,
cluster=cl)
print(paste("Completed normal forecast for model", i))
}
for( i in 1:(length(models.student))){
forecasts.list.student[[i]]<- ugarchroll(spec=models.student[[i]],data=returns,n.ahead = 1,
refit.every = 1, refit.window ="moving",n.start =window.size,
window.size=window.size,VaR.alpha = alpha.levels,
cluster=cl)
print(paste("Completed student's t forecast for model", i))
}
#remember to stop the cluster
stopCluster(cl)
#-- Save the results --##
saveRDS(forecasts.list.norm, paste0("normal-",ticker, ".rds"))
saveRDS(forecasts.list.student, paste0("student-",ticker, ".rds"))
#    845 Project
#
#   Leiguang Chen
#  Andrew van den Hoeven
# begin by clearing our workspace
rm(list=ls())
# -- Load in required libraries -- #
library(quantmod) #used to fetch the data
library(rugarch)
library(parallel) #used to run the code in parallel
# -- Load in the data -- #
setwd("/home/andrew/Documents/school/845/project/ACSTS845-project")
ticker<- "COM-AU_EFP"
#prices<-getSymbols(Symbols=c(ticker),
#        from="2004-01-01",
#        to="2016-12-01",
#        src="yahoo",
#        env=NULL)[,6]
price.df <-read.csv(paste0(ticker, ".csv"))
prices <- xts(price.df$Value, order.by = as.POSIXct( price.df$Date)  )
# Also we're concerned with the log returns of the adjusted close
returns <- dailyReturn(prices,type="log")
#-- Initialize our variables --#
window.size <- 250 # roughly one trading year
steps.ahead <- c(1,2) # the various horizons at which to look ahead
alpha.levels <- c(0.005,0.01,0.05,0.10)
models.norm <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0))) , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0))) , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1))) , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)))  #EGARCH(1,1)
)
forecasts.list.norm <- as.list(rep(NA,4))
models.student <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1)),distribution.model="std") , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std")  #EGARCH(1,1)
)
forecasts.list.student <- as.list(rep(NA,4))
#-- Rolling forecasts  --#
#first set up the parallel code
no_cores <- detectCores() - 1 # save a core for the rest of your computer
# Initiate cluster
cl <- makeCluster(no_cores)
for( i in 1:(length(models.norm))){
forecasts.list.norm[[i]]<- ugarchroll(spec=models.norm[[i]],data=returns,n.ahead = 1,
refit.every = 1, refit.window ="moving",n.start =window.size,
window.size=window.size,VaR.alpha = alpha.levels,
cluster=cl)
print(paste("Completed normal forecast for model", i))
}
for( i in 1:(length(models.student))){
forecasts.list.student[[i]]<- ugarchroll(spec=models.student[[i]],data=returns,n.ahead = 1,
refit.every = 1, refit.window ="moving",n.start =window.size,
window.size=window.size,VaR.alpha = alpha.levels,
cluster=cl)
print(paste("Completed student's t forecast for model", i))
}
#remember to stop the cluster
stopCluster(cl)
#-- Save the results --##
saveRDS(forecasts.list.norm, paste0("normal-",ticker, ".rds"))
saveRDS(forecasts.list.student, paste0("student-",ticker, ".rds"))
#    845 Project
#
#   Leiguang Chen
#  Andrew van den Hoeven
# begin by clearing our workspace
rm(list=ls())
# -- Load in required libraries -- #
library(quantmod) #used to fetch the data
library(rugarch)
library(parallel) #used to run the code in parallel
# -- Load in the data -- #
setwd("/home/andrew/Documents/school/845/project/ACSTS845-project")
ticker<- "COM-MILK"
#prices<-getSymbols(Symbols=c(ticker),
#        from="2004-01-01",
#        to="2016-12-01",
#        src="yahoo",
#        env=NULL)[,6]
price.df <-read.csv(paste0(ticker, ".csv"))
prices <- xts(price.df$Value, order.by = as.POSIXct( price.df$Date)  )
# Also we're concerned with the log returns of the adjusted close
returns <- dailyReturn(prices,type="log")
#-- Initialize our variables --#
window.size <- 250 # roughly one trading year
steps.ahead <- c(1,2) # the various horizons at which to look ahead
alpha.levels <- c(0.005,0.01,0.05,0.10)
models.norm <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0))) , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0))) , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1))) , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)))  #EGARCH(1,1)
)
forecasts.list.norm <- as.list(rep(NA,4))
models.student <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1)),distribution.model="std") , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std")  #EGARCH(1,1)
)
forecasts.list.student <- as.list(rep(NA,4))
#-- Rolling forecasts  --#
#first set up the parallel code
no_cores <- detectCores() - 1 # save a core for the rest of your computer
# Initiate cluster
cl <- makeCluster(no_cores)
for( i in 1:(length(models.norm))){
forecasts.list.norm[[i]]<- ugarchroll(spec=models.norm[[i]],data=returns,n.ahead = 1,
refit.every = 1, refit.window ="moving",n.start =window.size,
window.size=window.size,VaR.alpha = alpha.levels,
cluster=cl)
print(paste("Completed normal forecast for model", i))
}
#    845 Project
#
#   Leiguang Chen
#  Andrew van den Hoeven
# begin by clearing our workspace
rm(list=ls())
# -- Load in required libraries -- #
library(quantmod) #used to fetch the data
library(rugarch)
library(parallel) #used to run the code in parallel
# -- Load in the data -- #
setwd("/home/andrew/Documents/school/845/project/ACSTS845-project")
ticker<- "COM-MILK"
#prices<-getSymbols(Symbols=c(ticker),
#        from="2004-01-01",
#        to="2016-12-01",
#        src="yahoo",
#        env=NULL)[,6]
price.df <-read.csv(paste0(ticker, ".csv"))
prices <- xts(price.df$Value, order.by = as.POSIXct( price.df$Date)  )
# Also we're concerned with the log returns of the adjusted close
returns <- dailyReturn(prices,type="log")
#-- Initialize our variables --#
window.size <- 250 # roughly one trading year
steps.ahead <- c(1,2) # the various horizons at which to look ahead
alpha.levels <- c(0.005,0.01,0.05,0.10)
models.norm <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0))) , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0))) , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1))) , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)))  #EGARCH(1,1)
)
forecasts.list.norm <- as.list(rep(NA,4))
models.student <- list( ugarchspec(variance.model = list(garchOrder=c(1,0)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , # ARCH(1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std") , #GARCH(1,1)
ugarchspec(variance.model = list(garchOrder=c(1,1)), mean.model = list(armaOrder=c(1,1)),distribution.model="std") , #ARMA(1,1)-GARCH(1,1)
ugarchspec(variance.model = list(model = "eGARCH", garchOrder=c(1,1)), mean.model = list(armaOrder=c(0,0)),distribution.model="std")  #EGARCH(1,1)
)
forecasts.list.student <- as.list(rep(NA,4))
#-- Rolling forecasts  --#
#first set up the parallel code
no_cores <- detectCores() - 1 # save a core for the rest of your computer
# Initiate cluster
cl <- makeCluster(no_cores)
for( i in 1:(length(models.norm))){
forecasts.list.norm[[i]]<- ugarchroll(spec=models.norm[[i]],data=returns,n.ahead = 1,
refit.every = 1, refit.window ="moving",n.start =window.size,
window.size=window.size,VaR.alpha = alpha.levels,
cluster=cl)
print(paste("Completed normal forecast for model", i))
}
rm(list=ls())
